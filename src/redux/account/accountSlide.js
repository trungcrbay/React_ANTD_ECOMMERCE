//Slice: redux toolkit: gop action va reducer cua redux thuan
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

//khoi tao gia tri cua redux store 
const initialState = {
    isAuthenticated: false,
    isLoading:true,
    user: {
        //trong postman => login ra thong tin user
        email: "",
        phone: "",
        fullName: "",
        role: "",
        avatar: "",
        id: ""
    },
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//     'counter/fetchCount',
//     async (amount) => {
//         const response = await fetchCount(amount);
//         // The value we return becomes the `fulfilled` action payload
//         return response.data;
//     }
// );

export const accountSlice = createSlice({
    name: 'account',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doLoginAction: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            //action:lay payload sau do gan vao state cua redux
            //state: la initialState trong kho React
            state.isAuthenticated = true;
            state.isLoading=false;
            state.user = action.payload.user; //lấy giá trị payload sau đó truyền vào cho user trong kho redux
        },
        doGetAccountAction: (state, action) => {
            state.isLoading=false;
            state.isAuthenticated = true;
            state.user = action.payload.user;
        },
        doLogoutAction : (state,action) => {
            localStorage.removeItem('access_token'); //clear access_token luu tai local storage
            state.isAuthenticated=false;
            state.user = {
                email:"",
                phone:"",
                fullName:"",
                role:"",
                avatar:"",
                id:"",
            }
        }

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

});

export const { doLoginAction, doGetAccountAction, doLogoutAction } = accountSlice.actions; //goi action trong component cua react


export default accountSlice.reducer;
